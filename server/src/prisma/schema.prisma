generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String         @id @default(uuid())
  email         String         @unique
  phoneNumber   String?
  role          Role
  createdAt     DateTime       @default(now())
  candidate     Candidate?
  recruiter     Recruiter?
  sensitiveInfo SensitiveInfo? // Admin và Recruiter có thể có mật khẩu
  publicProfile PublicProfile?
  images        Image[]
}

model Candidate {
  candidateId       String        @id @default(uuid())
  programmingSkills String?
  user              User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId            String        @unique
  oauthTokens       OauthToken[]
  languages         Language[]
  projects          Project[]
  certificates      Certificate[]
  education         Education[]
  experience        Experience[]
  jobsSaved         JobSaved[]
  applications      Application[]
}

model SensitiveInfo {
  sensitiveId String     @id @default(uuid())
  password    String     // Mật khẩu để đăng nhập
  user        User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String     @unique
}

model Recruiter {
  recruiterId   String         @id @default(uuid())
  orgName       String?
  orgField      String?
  orgScale      String?
  orgAddress    String?
  orgTaxNumber  String?
  user          User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String         @unique
  balance       Float          @default(0)
  jobPosts      JobPost[]
  payments      Payment[]
}

model Image {
  imageId    String   @id @default(uuid())
  imageUrl   String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     String
}

model PublicProfile {
  publicProfileId     String    @id @default(uuid())
  fullName            String?
  gender              Boolean?
  birthDate           DateTime?
  address             String?
  linkedinUrl         String?
  githubUrl           String?
  personalDescription String?
  jobPosition         String?
  user                User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId              String    @unique
}

model OauthToken {
  OauthTokenId String    @id @default(uuid())
  provider     String
  providerId   String
  accessToken  String
  refreshToken String?
  createdAt    DateTime  @default(now())
  candidate    Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId  String

  @@unique([candidateId, provider])
}

model Language {
  languageId  String    @id @default(uuid())
  language    String
  level       String
  candidate   Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId String
}

model Project {
  projectId          String    @id @default(uuid())
  projectName        String
  projectTime        String
  urlRepo            String?
  projectDescription String?
  candidate          Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId        String
}

model Certificate {
  certificateId     String    @id @default(uuid())
  certificateName   String
  dateOfReceipt     DateTime
  certificateDetail String?
  candidate         Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId       String
}

model Education {
  educationId String    @id @default(uuid())
  schoolName  String
  startDate   DateTime
  finishDate  DateTime
  fieldName   String?
  candidate   Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId String
}

model Experience {
  experienceId       String    @id @default(uuid())
  companyName        String
  startDate          DateTime
  endDate            DateTime?
  jobPosition        String
  previousJobDetails String?
  candidate          Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId        String
}

model JobPost {
  jobId               String        @id @default(uuid())
  jobTitle            String
  jobImage            String?
  typeOfWork          String?
  location            String?
  jobSalary           String?
  candidatesLimit     Int?
  educationRequired   String?
  yearsOfExperience   String?
  typeOfIndustry      String?
  professionalSkills  String?
  certificateRequired String?
  languagesRequired   String?
  jobBenefit          String?
  leavePolicy         String?
  jobDescription      String?
  workEnvironment     String?
  jobSchedule         String?
  applicationDeadline DateTime
  postStatus          PostStatus    @default(PENDING)
  postedAt            DateTime      @default(now())
  recruiter           Recruiter     @relation(fields: [recruiterId], references: [recruiterId], onDelete: Cascade)
  recruiterId         String
  jobsSaved           JobSaved[]  
  applications        Application[]
}

model JobSaved {
  candidate   Candidate @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId String
  jobPost     JobPost   @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  jobId       String
  savedAt     DateTime  @default(now())

  @@id([candidateId, jobId])
}

model Application {
  candidate   Candidate         @relation(fields: [candidateId], references: [candidateId], onDelete: Cascade)
  candidateId String
  jobPost     JobPost           @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  jobId       String
  appliedAt   DateTime          @default(now())
  status      ApplicationStatus @default(PENDING)
  githubScore Float

  @@id([candidateId, jobId])
}

model Payment {
  id              String    @id @default(uuid())
  payAmount       Float
  transactionDate DateTime  @default(now())
  recruiter       Recruiter @relation(fields: [recruiterId], references: [recruiterId], onDelete: Cascade)
  recruiterId     String
}

model MonthlyRevenue {
  id           String   @id @default(uuid())
  year         Int
  month        Int
  totalRevenue Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([year, month])
}

enum Role {
  ADMIN
  RECRUITER
  CANDIDATE
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}
